#!/bin/bash
#-------------------------------------------------------------------------------
#                                                                     2021-08-21
#  Versione ripresa da 0 (2019-09-13):
#      .../gothings-app-servicewp-aux/aux/raspi-0/scheda/0.old
#  scopo:
#    aggiustare installazione docker su raspbian buster
#
#-------------------------------------------------------------------------------
#  INSTALL menu script for GoThings System
                                                               VERSION="0.01.09"
#  Menu for GoThings System installation
#    <-- Install docker
#    <-- Install GoThings base
#    <-- GoTo GoThings framework control menu
#
# download:
#   wget -O /home/pi/0 https://raw.githubusercontent.com/fpirri/gothings-install/master/0
#
#------------------------------------------------------------------------------
#    inspired by:
#      https://bash.cyberciti.biz/guide/Menu_driven_scripts
#
#==============================================================================
echo
echo "====================================================== GoThings for raspi"
echo "          INSTALL loader for GoThings docker system."
echo "========================================================================="
echo
sleep 2
#
# ---  environment
#
EDITOR=nano
PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'

#  conteggio tempi
SECONDS=0
TIMETOTAL=0
TIME1=0
TIME2=0
TIME3=0
TIME4=0
TIME5=0
TIME6=0
TIME7=0
TIME8=0
TIME9=0

#
DEBUGLOG=""     # utile nel debug
ITEXISTS=0      #  1 : file esiste    0 : file assente
MENUTRAP=0      #  66 : exit menu

HOMEDIR="/home/pi/"
cd ${HOMEDIR} #work on user pi home

#
##########################################################################
############################################# Functions for install script
#
##########################################################################
pause(){
  #
  #  ask key before continuing (^C is active)
  #    $key:  user input key
  #
  echo "-------------------------------------------------------------- $1/"
  read -rsp $'Please press any key to continue ...' -n 1 key
}
#
##########################################################################
avanti(){
#
#  continue or exit
#    $key:  user input key
#
  read -rsp $'Please press any key to continue or ^C to exit ...' -n 1 key
}
#
##########################################################################
dots(){
# wait $1 seconds, printing dots on the screen
#   $1 :  # of seconds to wait
  local param1
  printf -v param1 '%d\n' $1 2>/dev/null # converti in intero con tutti i controlli
  while [ $param1 -gt 0 ]
  do
    echo -n "."
    sleep 0.5
    echo -n "."
    sleep 0.5
    let "--param1"
  done
}
#
##########################################################################
dots_nl(){ #  Dots 'new line'
# wait $1 seconds, printing dots on the screen
#
# add a newline at the end
#
  dots $1
  echo
}
#
##########################################################################
printms(){
# stampa minuti & secondi
# $1  tempo da stampare
# $2  etichetta
  echo "$2 $(($1/60))m $(($1%60))s"
}
#
##########################################################################
showtimes(){
  #
  echo 
  echo "--------------------------------------------------------- 6:"
  echo "Elapsed times:"
  printms ${TIME1} "1. UTILS        "
  printms ${TIME2} "2. DOCKER       "
  printms ${TIME3} "3. COMPOSE      "
  printms ${TIME4} "4. TEST nginx   "
  printms ${TIME5} "5. TEST servers "
  printms ${TIME7} "5. TEST node    "
  echo
  TIMETOTAL=$((TIME1+TIME2+TIME3+TIME4+TIME5))
  printms ${TIMETOTAL} "Total time: "
  echo 
  echo 
  printms ${TIME7} "Delete containers  "
  echo
  echo "-----------------------------------------------------------"
  avanti
}
#
##########################################################################
getgitfile(){    # Lettura file da github
  #
  #  use globals:
  #    DEBUGLOG=""     # utile nel debug
  #    ITEXISTS=0      #  1 : file esiste    0 : file assente
  #
  #
  #     <-- se esiste il file $1 ed ha lunghezza > 0 :
  #         <-- si va avanti senza altre azioni
  #     <-- altrimenti si prova a scaricare il file da github
  #     <-- si riprova il test di lunghezza
  #         se non funziona si torna con ITEXISTS=0
  #     
  # call:    getgitfile $1 $2 $3
  #   $1:    "file"                           <--  raspi-testdirs.tar.gz
  #   $2:    "github project branch"          <--  gothings-raspi-install/master/
  #   $3:    "raspi path after /home/pi/ "    <--  ''
  # path fisso per gothings:
  #   Const: "https://raw.githubusercontent.com/fpirri/"
  #
  # RETURN:
  #           ITEXISTS = 1 se esiste, 0 altrimenti
  #
  # Verify file existence, get it from github if not
  #
  #  bash:  -s file  True if file exists and has a size greater than zero
  #
  FILEGIT="/home/pi/$3$1"
  DEBUGLOG="|| getgitfile() INFO || Il file cercato e': $FILEGIT |"
  if [[ -s $FILEGIT ]]
  then
    ITEXISTS=1    # file exists and length > 0
    DEBUGLOG="$DEBUGLOG | $FILEGIT esiste |"
  else            # si prova a scaricarlo
    DEBUGLOG="$DEBUGLOG | $FILEGIT does not exist |"
    
    wget -O $FILEGIT https://raw.githubusercontent.com/fpirri/$2$1
    if [[ -s $FILEGIT ]]
    then
      ITEXISTS=1    # file exists and length > 0
      DEBUGLOG="$DEBUGLOG | $FILEGIT trovato |"
    else
      ITEXISTS=0    # file introvabile !
      DEBUGLOG="$DEBUGLOG | $FILEGIT introvabile |"
      echo $DEBUGLOG                               ########### Stampa sempre mentre sviluppo ...
    fi
  fi
  return $ITEXISTS
}
#
##########################################################################
stopmenu(){
  #  $1 :  nome del file non trovato
  #  $2 :  riga di debug aggiuntiva
  echo 
  echo "------------------------------------------------------"
  echo -e "${RED} ERROR on file: $1 - debug message: ${STD}"
  echo $DEBUGLOG
  echo $2
  echo "------------------------------------------------------"
  echo "Cannot continue."
  echo 
  MENUTRAP=66
  return 66
}
#
##########################################################################
utils(){
  # 1. Set base directories & data, INSTALL utilities for docker
  SECONDS=0
  echo 
  echo 
  echo "-------------------------------------------------------------- 1:"
  echo "Preliminary operations:"
  echo " - set docker group"
  echo " - expand filesystem"
  echo "   Note: Docker group will be useful later on .."
  echo "Add docker group"
  sudo groupadd docker
  echo "Add user pi to docker group"
  sudo gpasswd -a $USER docker
  echo
  sleep 5
  echo 
  echo "----------------------------------------------------------------"
  echo "Set base directories & data, INSTALL utilities for docker"
  echo 
  sleep 2
  # set locale
  echo "Generate locales for gothings"
  sudo cp /etc/locale.gen  /etc/locale.gen.bk
  sudo sed -i '$a it_IT.UTF-8 UTF-8' /etc/locale.gen
  sudo sed -i '$a en_US.UTF-8 UTF-8' /etc/locale.gen
  ### en_GB non serve: e' gia' attivo
  #sudo sed -i '$a en_GB.UTF-8 UTF-8' /etc/locale.gen
  sudo locale-gen 
  echo "Set default on en_US"
  sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 
  sudo cp /etc/locale.gen.bk  /etc/locale.gen
  echo "Available locales now are:"
  locale -a
  echo
  echo "Please note active locale will be updated at next login/reboot"
  # install tree (altri programmi utili?)
  echo "install utilities"
  sudo apt-get -y update && sudo apt-get -o Dpkg::Options::=--force-confdef -y install tree
  sudo apt-get -y install jq
  echo
  echo "Create base dirs"
  mkdir /home/pi/dockrepo
  mkdir /home/pi/dockrepo/sysdata
  mkdir /home/pi/dockrepo/sysdata/htdocs      # web data
  mkdir /home/pi/dockrepo/sysdata/nginxdata   # network proxy config
  mkdir /home/pi/dockrepo/sysdata/nodedata    # node applications
  mkdir /home/pi/dockrepo/sysdata/pythondata  # python applications
  mkdir /home/pi/dockrepo/sysdata/redisdata   # noSQL db
  mkdir /home/pi/dockrepo/sysdata/raspi-test  # test di installazione
  echo "Show dir tree:"
  tree -d /home/pi/
  echo
  sleep 3
  echo
  # setup dirs:  dockrepo & sysarchive
  echo
  echo "set dirs for GOTHINGS: get content"
  echo
# def  $1 $2 $3
  FILE="raspi-testdirs.tar.gz"
  GITBR="gothings-raspi-install/master/" # github branch/dir dove va preso il file
  PIDIR=""                               # path da aggiungere a HOMEDIR == /home/pi/
  CALL="${FILE} $GITBR $PIDIR"
  getgitfile ${CALL}
  if [[ $ITEXISTS -ne 1 ]]
  then
    echo 
    echo "------------------------------------------------------"
    echo -e "${RED} ERROR on file: ${FILE} - debug message: ${STD}"
    echo $DEBUGLOG
    echo "------------------------------------------------------"
    echo "Cannot continue."
    echo 
    MENUTRAP=66
    return 66
  else
    echo 
    echo "expand content"
    sudo tar xzvf "/home/pi/${FILE}" -C /home/pi/
  fi
  echo
  echo "GOTHINGS user content copied"
  sleep 5
  echo 
  echo "Add the Docker official repos"
  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -
  echo "deb [arch=armhf] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
        $(lsb_release -cs) stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list
  echo 
  echo "Install docker package prerequisites"
  sudo apt update
  sudo apt install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg2 \
    software-properties-common
  echo
  echo "Docker package prerequisites now installed"
  sleep 3
  echo
  echo "GOTHINGS dir tree:"
  echo
  tree -d /home/pi/
  TIME1=${SECONDS}
  echo
  echo "Elapsed time"
  printms ${TIME1} "1. UTILS   "
  echo "--------------------------------------------------------------"
  sleep 5
  avanti
}
#
##########################################################################
dockinstall(){
  # 2. INSTALL docker community edition
  SECONDS=0
  echo 
  echo 
  echo "-------------------------------------------------------------- 2:"
  echo "INSTALL docker community edition"
  echo 
  echo "Versione -ce, all architectures"
  sleep 3
  cd ${HOMEDIR} #work on user pi home
  sudo apt update -y
  sudo apt install -y docker-ce
  echo
  echo "Docker installed, verify docker version:"
  sudo docker version
  echo
  echo "Test the simple 'docker ps -a' function, it should not show errors"
  sudo docker ps -a
  echo "------------------"
  sleep 3
  echo
  echo "enable docker service at boot"
  sudo systemctl enable docker
  TIME2=${SECONDS}
  echo
  echo "Elapsed time:"
  printms ${TIME2} "2. DOCKER  "
  echo "--------------------------------------------------------------"
  sleep 5
  avanti
}
#
##########################################################################
composeinstall(){
  # 3. INSTALL docker community edition
  SECONDS=0
  echo 
  echo 
  echo "-------------------------------------------------------------- 3:"
  echo "INSTALL docker compose"
  echo 
  sleep 3
  echo
  echo "Install compose and pip pre-requisites:"
  echo
  echo "Please note this section will take a long time!"
  echo "It took more than an hour on my raspberry PI1 mod. B+"
  sleep 5
  sudo apt update
  sudo apt-get install -y libffi-dev libssl-dev
  sudo apt-get install -y python3 python3-pip
  sudo apt-get remove python-configparser         #### <-- MANCA negli altri ...
  echo
  echo "Install docker-compose using python-pip"
  sudo pip3 -v install docker-compose
  echo
  echo "docker-compose version:"
  sudo docker-compose --version
  TIME3=${SECONDS}
  echo
  echo "Elapsed time:"
  printms ${TIME3} "3. COMPOSE "
  echo "--------------------------------------------------------------"
  sleep 5
  avanti
}
#
##########################################################################
testgothings(){
  # 4. TEST use docker-compose for a simple configuration
  SECONDS=0
  echo 
  echo 
  echo "-------------------------------------------------------------- 4:"
  echo "   SEZIONE IN  AGGIUSTAMENTO"
  echo
  echo "TEST - use docker-compose for a simple configuration"
  echo
  echo "Please note:"
  echo "You will find documentation about this test in the site:"
  echo "  https://www.gothings.org/raspberry-gothings/"
  echo 
  echo 
  echo 
  pause
  echo
  echo "There are a few pre-built images to support testing of GoThings"
  echo "install on the raspberry. We have:"
  echo "  NGINX     <-- http proxy to interface all network communication"
  echo "  NODEBASE  <-- nodejs environment to support generic javascript applications"
  echo 
  echo "Install gothings docker networks"
  echo "Please note that the following will show 'already exists' warnings"
  echo "if this section is started multiple times." 
  echo "These warnings are not influential."
  echo
  echo "- gothingsnet"
  sudo docker network create -d bridge --subnet 172.29.196.0/24 --gateway 172.29.196.1 gothingsnet  
  echo "- servicenet"
  sudo docker network create -d bridge --subnet 172.29.195.0/24 --gateway 172.29.195.1 servicenet
  echo 
# def  $1 $2 $3
  FILE="raspi-testdirs.tar.gz"      # nome dell'archivio
  GITBR="gothings-raspi-install/master/" # github branch/dir dove va preso il file
  PIDIR=""                               # path da aggiungere a HOMEDIR == /home/pi/
  CALL="${FILE} $GITBR $PIDIR"
  getgitfile ${CALL}
  if [[ $ITEXISTS -ne 1 ]]
  then
    echo 
    echo "------------------------------------------------------"
    echo -e "${RED} ERROR on file: ${FILE} - debug message: ${STD}"
    echo $DEBUGLOG
    echo "------------------------------------------------------"
    echo "Cannot continue."
    echo 
    MENUTRAP=66
    return 66
  else
    echo 
    echo "expand content"
    sudo tar xzvf "/home/pi/${FILE}" -C /home/pi/
  fi
  echo
  echo "GOTHINGS user content copied"
  echo
  echo "Start example using docker-compose"
  dots 2
pause
  echo
  echo
  echo
  echo "First time you run this section, the raspi has to download the docker"
  echo "images and downloads may take a long time, please be patient"
  echo "Anyway, this only needs to be done once, docker will store"
  echo "all downloaded images."
  echo
  echo "At the end of download, nginx container should run in a few seconds"
  echo "while the nodejs container have to run the npm install phase"
  echo  "so, this script waits until the install phase ends, then it"
  echo  "allows you to use your browser to do the final board test."
  echo
  echo "The process is starting now:"
  echo
  sudo docker-compose -f /home/pi/dockrepo/sysdata/raspi-test/raspi-test-install.yml up -d
  echo
  echo "Container should have started. I wait 10 seconds to allow for them"
  echo "to stabilize"
  echo "Then you should see the status of containers in your raspi"
  sleep 10
  sudo docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
  echo "-------------------------"
  echo "You find above the status of containers in your system"
  echo 'Hopefully, for each container you see something similar to:'
  echo "  'Up xx seconds'"
  echo "-------------------------"
  sleep 5
  pause "4"
  echo 
  echo "Now, I try to read something using nginx container .."
  echo
  echo -e "${RED}-------------------------> ${STD} text from nginx container:"
  curl 'localhost:8080/test.txt'
  echo
  echo -e "${RED}<------------------------- ${STD} end of text from nginx"
  echo
  echo "The text above is coming from nginx container"
  echo "It should confirm nginx is running"
  echo "-------------------------"
  echo
  TIME4=${SECONDS}
  sleep 7
  echo
  echo "--------------------------------------------------------------"
  echo "Elapsed time building nginx proxy:"
  printms ${TIME4} "4. TEST nginx  "
  sleep 5
  echo
  echo
  echo "Please write the following in the address bar of your PC browser:"
  echo "   http://<IP raspi address>:8080"
  echo "where <IP raspi address> is the IP address  of your Raspberry"
  echo "you should find a bunch of simple tests for the nginx proxy"
  echo
  echo "This test uses only the static files capabilities of nginx"
  echo "In the following we exploit the proxy capabilities also"
  echo
  echo "Please note that you will have errors if your PC is not"
  echo "connected to the same LAN network of your raspi"
  echo
# sezione: aspetta npm install
  pause "4"
  echo
  echo
  echo "The node-test container has to initialize the node environment"
  echo "Main job here is to read the package.json configuration file and"
  echo "to populate the node_modules directory"
  echo "After that npm will re-start and passes control to nodejs servers"
  echo
# parte 'attendi la fine di run install'
  sudo docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
  echo "-------------------------"
  Fine=0
  echo "start loop di attesa"
  while [ "$Fine" -ne "1" ]
  do
  #  sleep 5
    echo "loop ..."
    Fine=$(docker ps | grep node-test)
    Fine=$?
    echo "Fine: "${Fine}
  done
  echo
  echo "npm install ends"
  dots 2
  echo
  echo
  echo "You now have two node js containers, each one running an http "
  echo "server built with the EXPRESS framework"
  echo "Their names are 'node-main' and 'node-srv'"
  echo
  echo "In the next section you will reach them at the URL:"
  echo "   http://<IP raspi address>"
  echo "where <IP raspi address> is the IP address  of your Raspberry"
  echo
  echo "Let's show container status, to verify NPM work"
  echo "you should see the nginx proxy up, while the node js containers"
  echo "exited after NPM installation of the framework"
  echo "you will end the 'status show' pressing any key"
  echo
  echo "Run TEST NODE to start the node js servers"
  echo
  pause
  ./showdock
  echo
  dots 2
}
#
##########################################################################
testnode() {
# 5. TEST NODE use docker-compose and test a couple of nodejs web server
  echo 
  echo 
  echo "-------------------------------------------------------------- 5:"
  echo "TEST DA CONTROLLARE !!!"
  echo
  echo "Verify nginx proxy is running ..."
  curl 'localhost:8080/test.txt' > /dev/null 2>&1
  GetTxt=$?
  echo "Test result: ${GetTxt}"
  echo
  if [ $GetTxt -gt 0 ]
  then
    echo "nginx not running!"
    echo "Please wait while I try to restart it"
    echo
    sudo docker-compose -f /home/pi/dockrepo/sysdata/raspi-test/raspi-test-nginx.yml up -d > /dev/null 2>&1
    dots 2
    curl 'localhost:8080/test.txt' > /dev/null 2>&1
    GetTxt=$?
    if [ $GetTxt -gt 0 ]
    then
      echo "nginx still NOT running"
      echo 
      echo "This error is not recoverable"
      echo 
      echo "Please retry section TEST or re-install docker"
      pause
      return 7
    fi
  fi
  echo "nginx OK, continue ..."
  echo
  echo
  echo "TEST - use docker-compose to run node js web servers"
  echo
  echo "This test run two nodejs web server"
  echo
  echo "Please see https://www.gothings.org/raspberry-gothings "
  echo "for a detailed description of this example"
  echo
  pause
  SECONDS=0
  echo
  echo "The process is starting now:"
  echo
  sudo docker-compose -f /home/pi/dockrepo/sysdata/raspi-test/raspi-test-run.yml up -d
  TIME5=${SECONDS}
  echo
  echo "--------------------------------------------------------------"
  echo "Elapsed time to start the node js express servers:"
  printms ${TIME5} "5. TEST node   "
  echo
  echo "Container should have started. I wait 10 seconds to allow for them"
  echo "to stabilize"
  echo "Then you should see the status of containers in your raspi"
  sleep 10
  sudo docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
  echo "-------------------------"
  echo "You find above the status of containers in your system"
  echo "Hopefully, for each container you see something similar to:"
  echo "  'Up xx seconds'"
  echo "-------------------------"
  echo
  pause
  echo
  echo "Please write the following in the address bar of your browser:"
  echo "   http://<IP raspi address>"
  echo "where <IP raspi address> is the IP address  of your Raspberry"
  echo
  echo "You may try the following URLs to test the proxy to serve some"
  echo "static pages you may modify for your purposes:"
  echo " <IP raspi address>         reverse proxy homepage "
  echo " <IP raspi address>/main    reverse proxy 1st server homepage"
  echo " <IP raspi address>/srv2    reverse proxy 2nd server homepage"
  echo "pages above are static and independent from the node js servers,"
  echo "you so verify the proxy functioning"
  echo
  echo "Please note that start-up time for node js server may be long"
  echo "owing to npm updating of required modules. This may take up to"
  echo "a few minutes, normally it is only several seconds"
  dots 3
  echo
  echo "You may also try:"
  echo " <IP raspi address>/main/     1st node server homepage"
  echo " <IP raspi address>/srv2/     2nd node server homepage"
  echo " <IP raspi address>/main/...  a page from 1.st server"
  echo " <IP raspi address>/srv2/...  a page from 1.st server"
  echo "pages above are dynamic and are generated by the respective"
  echo "node js servers, so you verify the node servers functioning"
  echo
  pause
}
#
##########################################################################
link2doc() {
# 6. link alla documentazione
  echo 
  echo 
  echo 
  echo 
  echo 
  echo "-------------------------------------------------------------- 5:"
  echo "Links to documentation"
  echo "    <-- right click to copy/open a link"
  echo
  echo "https://github.com/fpirri/gothings-raspi-install#readme"
  echo "   <-- github repository README.md"
  echo "https://www.gothings.org/raspberry-gothings/"
  echo "   <-- raspberry doc from GoThings site"
  echo "https://www.gothings.org/things/"
  echo "   <-- GoThings documentation on the GoThings site"
  echo
  echo 
  pause
}
#
##########################################################################
delconts() {
# 7. delete all containers
  echo 
  echo 
  echo "-------------------------------------------------------------- 5:"
  echo "DELETE all existing containers"
  echo
  echo "Please note you will have to restart the creation process"
  echo
  read -rsp "Do you like to DELETE ? [y/N] " -n 1 key
  case "$key" in
      [yY]) 
        echo
        echo "STOP & DESTROY all running containers ..."
        echo
        echo "... stopping running containers"
        sudo docker stop $(docker ps -a -q -f status=running)
        echo
        echo "... removing all containers"
        sudo docker rm $(docker ps -a -q -f status=exited)
        echo
        echo "Done."
        echo
        ;;
      *)
        echo
        echo "Back to choice"
        dots 2
        ;;
  esac
}
#
##########################################################################
gotocontrol(){
# 8.  download & exec 'go-raspi'
  SECONDS=0
  echo 
  echo 
  echo "-------------------------------------------------------------- 8:"
  echo "Preparing for GOTHINGS CONTROL MENU"
  echo
  GoFile="go-raspi"
  GITBR="gothings-raspi-install/master/"  # dir su github dove va preso il file
  PIDIR=""                          # path da aggiungere a HOMEDIR == /home/pi/
  CALL="${GoFile} $GITBR $PIDIR"
  getgitfile ${CALL}
  if [[ $ITEXISTS -ne 1 ]]
  then ########## DA FARE se il file MANCA  (caso 'interrompi TUTTO' e si esce dal menu)
    echo 
    echo "------------------------------------------------------"
    echo -e "${RED} ERROR on file: ${GoFile} - debug message: ${STD}"
    echo $DEBUGLOG
    echo "------------------------------------------------------"
    echo "Cannot continue."
    echo 
    MENUTRAP=66
    return 66
  fi ########## Si va avanti se il file esiste ...
  #
  chmod +x /home/pi/${GoFile}
  #
  TIME8=${SECONDS}
  echo
  echo "Elapsed time:"
  printms ${TIME8} "8. Load go-raspi"
  echo "--------------------------------------------------------------"
  echo
  sleep 3
  echo
  echo "Now ready to exec GOTHINGS CONTROL MENU"
  echo "    NOTE: if you continue the GOTHINGS CONTROL MENU will be executed"
  echo
  echo -e "    ${RED}  ATTENTION !!  ${STD} "
  echo "    continue will bring you to the GOTHINGS CONTROL MENU"
  echo "    exit return back to the console prompt"
  echo
  avanti
  ./${GoFile}
  echo "exit from 0 / boot install"
  MENUTRAP=66
}
#
###################################################################
#
# function to display menus
show_menus() {
  clear
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ${VERSION}"
  echo
  echo "      G O T H I N G S   B U I L D   MENU"
  echo
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo
  echo "1. UTILS      install utilities & base data"
  echo "2. DOCKER     download & install docker for GOTHINGS"
  echo "3. COMPOSE    download & install docker-compose"
  echo "4. TEST       use docker-compose for a simple configuration"
  echo "5. TEST NODE  test node js express web servers"
  echo "6. DOC        were to find documentation"
  echo "7. DELETE     delete all containers"
  echo "8. GoThings   download GoThings control menu"
  echo "9. TIMES      show elapsed times"
}
# read input from the keyboard and take a action
# invoke the function according to the entered number
read_options(){
  local choice
  read -rsp $'Enter choice [ or ^C to exit ] ' -n 1 choice
  case $choice in
    1) utils;;
    2) dockinstall;;
    3) composeinstall;;
    4) testgothings;;
    5) testnode;;
    6) link2doc;;
    7) delconts;;
    8) gotocontrol;;
    9) showtimes;;
    *) echo -e "${RED}Error...${STD}" && sleep 2
  esac
}
 
# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGQUIT SIGTSTP
#trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------

while true
do
  # internal trap
  if [[ ${MENUTRAP} -eq 66 ]]
  then
    return 66  #-- stop menu
  fi
	show_menus
	read_options
done
echo "Shell terminated."
echo
# fine versione 0.01.07
