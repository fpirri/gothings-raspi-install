#!/bin/bash
#                                                                    2020-03-12
#    GOTHINGS RASPI
                                                                  Version="1.03"
#  NOTA: primo tentativo 'manage raspi boards'
#    derivato da g + gocloud-wp
#    aggiunte da gothings-raspi-install
#
#
#  Vedi doc in:
#    .../github-gothings/gothings-raspi-basezero-aux/README-raspi-basezero
#
#
#===============================================================================
#                                                                 Organizzazione
#
#    passa il controllo a .../sysconfig/raspi-basezero/manage-raspi
#
#
#
################################################################################
#
#==============================================================================
echo
echo "========================================================= raspi GOTHINGS"
echo
echo "      Control loader for GOTHINGS on raspberry boards"
echo
echo "========================================================= version ${Version}"
echo
#
#-----------------   local working 'globals' for the main application
USERNAME="pi"
HOMEDIR="/home/${USERNAME}/"
cd ${HOMEDIR} # to work on user <USERNAME>  home
#
################################################################################
#
# get script name:
ThisScript="$(basename "$0")"
#
################################################################################
#
# ----------------------------------
# Mode: DEBUG
DebugMode=0                     # 0 == NO debug     > 0 == Show debug info
#
# ----------------------------------
# Define app
AppName="basezero"
AppDisplayName="BaseZero"
AppType="cloud"
#
# ----------------------------------
# Define display
MenuName="GoRaspi"
MenuTag="${MenuName} v${Version}"
#
# ----------------------------------
# variabili globali interne
UserName=yesfi
HomeDir="/home/${UserName}/"
Dockrepo="${HomeDir}dockrepo/"
AppDir="${Dockrepo}sysdata/${AppName}/"
SysConfigDir="${Dockrepo}sysconfig/"
AppConfigDir="${Dockrepo}sysconfig/raspi-${AppName}/"
#
# ------------------------------------------------------------------------------

#
MenuTrap=0                                 # segnalatore errore irreparabile
RetValue=3                                 # 3--> OK     5--> KO
# ----------------------------------
# costanti varie
Red='\033[0;41;30m'
Std='\033[0;0;39m'
#
#
##########################################################################
#  Funzioni utili
##########################################################################
avanti(){
# Domanda di continuazione personalizzabile
# call:    avanti \$1
#   \$1:   <stringa di domanda>
  echo "----------------------------------------------------------------"
  read -rsp "$1" -n 1 key
  echo
}
#
pause() {
#  Domanda 'continue or exit'
  avanti 'Press any key to continue or ^C to exit ...'
}
#
##########################################################################
dots(){
# wait $1 seconds, printing dots on the screen
#   $1 :  # of seconds to wait
  local param1
  printf -v param1 '%d\n' $1 2>/dev/null # converti in intero con tutti i controlli
  while [ $param1 -gt 0 ]
  do
    echo -n "."
    sleep 0.5
    echo -n "."
    sleep 0.5
    let "--param1"
  done
}
#
##########################################################################
dots_nl(){ #  Dots 'new line'
# wait $1 seconds, printing dots on the screen
#
# add a newline at the end
#
  dots $1
  echo
}
#
##########################################################################
toupdate(){
  #  segnala funzione IN CORSO DI MODIFICA
  echo 
  echo
  echo "------------------------------------------------------------ ???:"
  echo
  echo "This function is WORK IN PROGRESS"
  echo "A new definition & rewriting is on course"
  echo
  #exit
  pause "?"
}
#
##########################################################################
#
confstop(){
  if [[ ! -s "$1" ]]; then
    #  Configurazione go-raspi non corretta
    #    $1    nome del file mancante
    echo
    echo "----------------------------------------------------------------"
    echo 
    echo -e "${Red} file $1 is missing ${Std}"
    echo
    echo "Unfortunately, go-raspi cannot continue !"
    echo "Please consult documentation, re-configure and retry"
    echo
    exit
  fi
}
#
##########################################################################
getgitfile(){    # Lettura file da github
  #
  #  use globals:
  #    DEBUGLOG=""     # utile nel debug
  #    ITEXISTS=0      #  1 : file esiste    0 : file assente
  #
  #
  #     <-- se esiste il file $1 ed ha lunghezza > 0 :
  #         <-- si va avanti senza altre azioni
  #     <-- altrimenti si prova a scaricare il file da github
  #     <-- si riprova il test di lunghezza
  #         se non funziona si torna con ITEXISTS=0
  #     
  # call:    getgitfile $1 $2 $3
  #   $1:    "file"                           <--  raspi-testdirs.tar.gz
  #   $2:    "github project branch"          <--  gothings-raspi-install/master/
  #   $3:    "raspi path after /home/pi/ "    <--  ''
  # path fisso per gothings:
  #   Const: "https://raw.githubusercontent.com/fpirri/"
  #
  # RETURN:
  #           ITEXISTS = 1 se esiste, 0 altrimenti
  #
  # Verify file existence, get it from github if not
  #
  #  bash:  -s file  True if file exists and has a size greater than zero
  #
  FILEGIT="/home/pi/$3$1"
  DEBUGLOG="|| getgitfile() INFO || Il file cercato e': $FILEGIT |"
  if [[ -s $FILEGIT ]]
  then
    ITEXISTS=1    # file exists and length > 0
    DEBUGLOG="$DEBUGLOG | $FILEGIT esiste |"
  else            # si prova a scaricarlo
    DEBUGLOG="$DEBUGLOG | $FILEGIT does not exist |"
    
    wget -O $FILEGIT https://raw.githubusercontent.com/fpirri/$2$1
    if [[ -s $FILEGIT ]]
    then
      ITEXISTS=1    # file exists and length > 0
      DEBUGLOG="$DEBUGLOG | $FILEGIT trovato |"
    else
      ITEXISTS=0    # file introvabile !
      DEBUGLOG="$DEBUGLOG | $FILEGIT introvabile |"
      echo $DEBUGLOG                               ########### Stampa sempre mentre sviluppo ...
    fi
  fi
  return $ITEXISTS
}
#
################################################################################
#
################################################################################
#                                                                     MAIN LOGIC
#  set dirs
echo
echo "Verify directory structure ..."
# la prima volta non ci sono i dirs, creiamoli !
#
# ~/dockrepo/
  if [ ! -d "${Dockrepo}" ]; then
    mkdir "${Dockrepo}"
  fi
# ~/dockrepo/sysconfig/
  if [ ! -d "${SysConfigDir}" ]; then
    mkdir "${SysConfigDir}"
  fi
# ~/dockrepo/sysconfig/raspi-basezero
  if [ ! -d "${AppConfigDir}" ]; then
    mkdir "${AppConfigDir}"
  fi
#
#  prendi 'manage-raspi' da github & rendilo eseguibile
File="manage-raspi"
GitBr="gothings-raspi-install/master/" # github branch/dir dove va preso il file
PiDir="dockrepo/sysconfig/raspi-basezero/"                               # path da aggiungere a HOMEDIR == /home/pi/
Call="${File} $GitBr $PiDir"
getgitfile ${Call}
if [[ $ITEXISTS -ne 1 ]]
then
  confstop ${File}
else
  chmod +x ${AppConfigDir}${File}
fi
#
#  cambia dir
cd ${AppConfigDir}
#
# esegui lo script
echo "Go to management script"
./${File}
echo
echo "Type:"
echo "  ./manage-raspi"
echo "to exec raspberry management again"
echo
exit
#
#  RIPULIRE lo script dopo il test finale
#
##############